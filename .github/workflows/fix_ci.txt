Your job failed due to multiple TypeScript errors in src/core/validator.ts and tests/index.test.ts. Hereâ€™s how to resolve them:

---

### 1. "Cannot redeclare exported variable" (TS2323, TS2484)

You both declare and export the functions registerSyncRule, registerAsyncRule, and registerTransformer, and then attempt to re-export them as named exports at the end of the file:

```typescript
// Already exported individually:
export function registerSyncRule(name: string, fn: SyncValidator) { ... }
export function registerAsyncRule(name: string, fn: AsyncValidator) { ... }
export function registerTransformer(name: string, fn: Transformer) { ... }

// This line at the end causes redeclaration:
export { registerAsyncRule, registerSyncRule, registerTransformer };
```

**Solution:**
Remove the export line at the end (line 109):

```diff
- export { registerAsyncRule, registerSyncRule, registerTransformer };
```

You can keep the individual export statements on each function.

---

### 2. "Argument of type ... is not assignable to parameter of type 'AsyncValidator'" (TS2345)

For your async validators (e.g. 'equal', 'after'), you wrote:

```typescript
registerAsyncRule('equal', (state, params) => {
  // ...
  return currentDate > dateToCompare;
});
```

But AsyncValidator expects a function returning Promise<boolean>.

**Solution:**
Change these to async functions or return Promise.resolve:

```typescript
registerAsyncRule('equal', async (state, params) => {
  if (params.field && params.field.startsWith('$')) {
    const fieldToCompare = params.field.substring(1);
    return state.value === state.data[fieldToCompare];
  }
  return false;
});

registerAsyncRule('after', async (state, params) => {
  if (params.field && params.field.startsWith('$')) {
    const fieldToCompare = params.field.substring(1);
    const dateToCompare = new Date(state.data[fieldToCompare]);
    const currentDate = new Date(state.value);
    return currentDate > dateToCompare;
  }
  return false;
});
```

---

### 3. "Cannot find name 'validate'" (TS2552)

You reference validate inside async rules ('when'), but it's not in scope in validator.ts.

**Solution:**
- If validate is declared elsewhere, import it at the top of validator.ts:

```typescript
import { validate } from './path-to-validate';
```

- Or, if it's a circular dependency, consider refactoring to avoid cross-module calls, or pass it as a parameter.

---

### 4. Test errors: "Property 'isValid' does not exist on type 'Promise<ValidationResult>'" (TS2339)

In your tests, you call validate synchronously, but from your validator it appears validate is async. For example:

```typescript
const result = validate(data, schema);
expect(result.isValid).toBe(true);
```

**Solution:**
- If validate returns a Promise, use await (and make your tests async):

```typescript
it('should pass a valid data object', async () => {
  // ...
  const result = await validate(data, schema);
  expect(result.isValid).toBe(true);
});
```

- Apply this fix to all test cases in tests/index.test.ts.

---

## Summary of Code Changes

- Remove the batch export at the end of validator.ts.
- Change sync async validator functions to use async/await.
- Ensure validate is imported or accessible in validator.ts.
- Update your tests to await validate and mark them as async.

If you need further help with a specific file or code segment, let me know!
